{"version":3,"file":"Editing.js","sourceRoot":"","sources":["Editing.ts"],"names":[],"mappings":"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","sourcesContent":["import QueryTask = require(\"esri/tasks/QueryTask\");\r\nimport Query = require(\"esri/tasks/support/Query\");\r\nimport constName = require('../classes/ConstName');\r\nclass Editing {\r\n    static queryLocation;\r\n    static getLocationName(view, params = { PhuongXa: null, HuyenTP: null }) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (!this.queryLocation)\r\n                    this.queryLocation = new QueryTask({\r\n                        url: view.map.findLayerById(constName.BASEMAP).findSublayerById(constName.INDEX_HANHCHINHXA).url\r\n                    });\r\n                let where = [];\r\n                if (params.PhuongXa) where.push(`MaPhuongXa = '${params.PhuongXa}'`);\r\n                if (params.HuyenTP) where.push(`MaHuyenTP = '${params.HuyenTP}'`);\r\n                this.queryLocation.execute({\r\n                    outFields: ['TenXa', 'TenHuyen'],\r\n                    where: where.join(' and ')\r\n                }).then(res => {\r\n                    if (res) {\r\n                        let ft = res.features[0];\r\n                        if (ft && ft.attributes) {\r\n                            resolve(ft.attributes);\r\n                        }\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.log(error)\r\n                reject(error);\r\n            }\r\n\r\n        });\r\n    }\r\n    static getCreatedInfo(view) {\r\n        return {\r\n            NguoiCapNhat: view.systemVariable.user.userName,\r\n            NgayCapNhat: new Date().getTime(),\r\n        }\r\n    }\r\n    static getUpdatedInfo(view) {\r\n        return {\r\n            NguoiCapNhat: view.systemVariable.user.userName,\r\n            NgayCapNhat: new Date().getTime(),\r\n        }\r\n    }\r\n    static getNhomCayTrong(view, geometry) {\r\n        let layer = view.map.findLayerById(constName.TRONGTROT);\r\n        var query = layer.createQuery();\r\n        query.geometry = geometry;\r\n        query.outFields = [\"LoaiCayTrong\", \"NhomCayTrong\"];\r\n        return new Promise((resolve, reject) => {\r\n            layer.queryFeatures(query).then(result => {\r\n                resolve(result.features[0].attributes);\r\n            });\r\n\r\n        })\r\n    }\r\n    static getLocationInfo(view, geometry) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (!this.queryLocation)\r\n                    this.queryLocation = new QueryTask({\r\n                        url: view.map.findLayerById(constName.BASEMAP).findSublayerById(constName.INDEX_HANHCHINHXA).url\r\n                    });\r\n                this.queryLocation.execute({\r\n                    outFields: ['MaPhuongXa', 'MaHuyenTP'],\r\n                    geometry: geometry\r\n                }).then(res => {\r\n                    if (res) {\r\n                        let ft = res.features[0];\r\n                        if (ft && ft.attributes) {\r\n                            resolve(ft.attributes);\r\n                        }\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.log(error)\r\n                reject(error);\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\nexport = Editing"]}