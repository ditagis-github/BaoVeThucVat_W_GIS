{"version":3,"file":"SimpleDrawPoint.js","sourceRoot":"","sources":["SimpleDrawPoint.ts"],"names":[],"mappings":";;IAwBK;QAQG,YAAY,IAAI;YACZ,IAAI,CAAC,OAAO,GAAG;gBACX,OAAO,EAAE;oBACL,IAAI,EAAE,yBAAyB;iBAClC;aACJ,CAAA;YACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;YAC1C,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;YACxC,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC;QAKD,IAAI,CAAC,KAAK;YACN,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;YAG7B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;gBAC7C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;YAC1B,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,EAAE,GAAG,CAAC,EAAE;gBACxD,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvE,CAAC,CAAC,CAAA;QAEN,CAAC;QAID,WAAW;YACP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;gBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YAC3B,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACxB,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;gBAC1B,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;gBAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YACjC,CAAC;QACL,CAAC;QAKD,YAAY,CAAC,GAAG;YACZ,GAAG,CAAC,eAAe,EAAE,CAAC;YACtB,IAAI,KAAK,CAAC;YACV,KAAK,GAAG,IAAI,OAAO,CAAC;gBAChB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;oBACtB,CAAC,EAAE,GAAG,CAAC,CAAC;oBACR,CAAC,EAAE,GAAG,CAAC,CAAC;iBACX,CAAC;gBACF,MAAM,EAAE,IAAI,kBAAkB,EAAE;aACnC,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAC9C,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;KAEJ;IAAA,CAAC;IACF,OAAS,eAAe,CAAC","sourcesContent":["/**\r\n * Quá trình xử lý Vẽ Point với chức năng Tùy chọn điểm\r\n * Để khai báo lớp này, các tham số truyền vào\r\n * Ví dụ: var simpleDrawPoint = new SimpleDrawPoint(view,systemVariable)\r\n * systemVariable: Thông tin của khách hàng đang hiển thị\r\n */\r\nimport domConstruct = require('dojo/dom-construct');\r\nimport domClass = require('dojo/dom-class');\r\nimport dom = require('dojo/dom');\r\nimport on = require('dojo/on');\r\nimport FeatureLayer = require('esri/layers/FeatureLayer');\r\nimport Graphic = require(\"esri/Graphic\");\r\nimport GraphicsLayer = require('esri/layers/GraphicsLayer');\r\nimport Polyline = require(\"esri/geometry/Polyline\");\r\nimport Point = require(\"esri/geometry/Point\");\r\nimport Circle = require(\"esri/geometry/Circle\");\r\nimport SimpleLineSymbol = require(\"esri/symbols/SimpleLineSymbol\");\r\nimport SimpleMarkerSymbol = require(\"esri/symbols/SimpleMarkerSymbol\");\r\nimport SimpleFillSymbol = require(\"esri/symbols/SimpleFillSymbol\");\r\nimport geometryEngine = require('esri/geometry/geometryEngine');\r\nimport geometryEngineAsync = require('esri/geometry/geometryEngineAsync');\r\nimport PointEditing = require('../editing/PointEditing');\r\nimport EventListener = require('../classes/EventListener');\r\nimport Tooltip = require(\"ditagis/toolview/Tooltip\");\r\n     class SimpleDrawPoint {\r\n         options;\r\n         view;\r\n         systemVariable;\r\n         drawLayer;\r\n         eventListener;\r\n         clickEvent;\r\n         pointerMoveEvent;\r\n        constructor(view) {\r\n            this.options = {\r\n                tooltip: {\r\n                    move: 'Nhấn vào màn hình để vẽ'\r\n                }\r\n            }\r\n            this.view = view;\r\n            this.systemVariable = view.systemVariable;\r\n            this.drawLayer = new PointEditing(view);\r\n            this.eventListener = new EventListener(this);\r\n        }\r\n        /**\r\n         * Truyền vào là layer dùng để vẽ trụ điện\r\n         * @param {Feature Layer} layer \r\n         */\r\n        draw(layer) {\r\n            this.drawLayer.layer = layer;\r\n            // Lưu lại sự kiện hủy vẽ để xóa sau nếu không dùng sự kiện này bây giờ\r\n            // Sự kiện vẽ điểm\r\n            this.clickEvent = on(this.view, 'click', (evt) => {\r\n                this.clickHandler(evt)\r\n            });\r\n            // Lưu lại sự kiện hủy vẽ để xóa sau nếu không dùng sự kiện này bây giờ\r\n            this.pointerMoveEvent = on(this.view, 'pointer-move', evt => {\r\n                Tooltip.instance().show([evt.x, evt.y], this.options.tooltip.move);\r\n            })\r\n\r\n        }\r\n        /**\r\n         * Sau khi kết thúc quá trình vẽ nếu sự kiện nào còn tồn tại thì hủy nó đi\r\n         */\r\n        clearEvents() {\r\n            if (this.clickEvent) {\r\n                this.clickEvent.remove();\r\n                this.clickEvent = null;\r\n            }\r\n            if (this.pointerMoveEvent) {\r\n                Tooltip.instance().hide();\r\n                this.pointerMoveEvent.remove();\r\n                this.pointerMoveEvent = null;\r\n            }\r\n        }\r\n        /**\r\n         * Sự kiện vẽ Point\r\n         * @param {Event handle} evt\r\n         */\r\n        clickHandler(evt) {\r\n            evt.stopPropagation();\r\n            let point;\r\n            point = new Graphic({\r\n                geometry: this.view.toMap({\r\n                    x: evt.x,\r\n                    y: evt.y\r\n                }),\r\n                symbol: new SimpleMarkerSymbol()\r\n            });\r\n            this.eventListener.fire('draw-finish', point);\r\n            this.clearEvents();\r\n        }\r\n\r\n    };\r\n    export = SimpleDrawPoint;"]}